from fastapi import FastAPI, UploadFile, File, HTTPException, Depends, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer
import uuid
import os
from typing import List
from app.services.chat_service import chat_service

from app.config import settings
from app.services.file_processor import FileProcessor
from app.services.vector_store import VectorStore
from app.services.chat_service import ChatService
from app.security.crypto import DataEncryptor
from app.models.schemas import UploadResponse, ChatRequest, ChatResponse, HealthResponse

app = FastAPI(
    title="NeuroSim API",
    version="0.1.0",
    description="Secure AI-powered self-reflection platform with Privacy by Design"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
security = HTTPBearer()
file_processor = FileProcessor()
vector_store = VectorStore()
chat_service = ChatService()
encryptor = DataEncryptor()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis)
user_sessions = {}

def get_user_id(authorization: str = Depends(security)) -> str:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å JWT –≤–∞–ª–∏–¥–∞—Ü–∏—é
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID
    return str(uuid.uuid4())

@app.get("/")
async def root():
    return {
        "message": "NeuroSim Secure API is running!", 
        "status": "OK",
        "privacy_level": "encrypted_storage",
        "version": "0.1.0"
    }

@app.post("/upload", response_model=UploadResponse)
async def upload_file(
    file: UploadFile = File(...),
    user_id: str = Depends(get_user_id),
    background_tasks: BackgroundTasks = None
):
    """Secure endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if not file.filename.endswith(('.txt', '.pdf')):
            raise HTTPException(400, "Only TXT and PDF files are supported")
        
        # –ß—Ç–µ–Ω–∏–µ –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        contents = await file.read()
        encrypted_content = encryptor.encrypt_text(contents.decode('utf-8'))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        file_id = str(uuid.uuid4())
        background_tasks.add_task(
            process_file_background,
            file_id=file_id,
            user_id=user_id,
            encrypted_content=encrypted_content,
            filename=file.filename
        )
        
        return UploadResponse(
            file_id=file_id,
            user_id=user_id,
            filename=file.filename,
            status="processing",
            message="File is being processed securely"
        )
        
    except Exception as e:
        raise HTTPException(500, f"Error processing file: {str(e)}")# –í –∏–º–ø–æ—Ä—Ç—ã –¥–æ–±–∞–≤–∏—Ç—å:

@app.post("/chat")
async def chat_with_digital_double(question: str, user_id: str = Depends(get_user_id)):
    """üí¨ RAG-–ø–∞–π–ø–ª–∞–π–Ω —Å —Ä–µ–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    try:
        response = chat_service.generate_personalized_response(question, user_id)
        return {
            "question": question,
            "answer": response,
            "user_id": user_id,
            "pipeline": "rag_implemented",
            "sources_used": 3  # TODO: –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        }
    except Exception as e:
        raise HTTPException(500, f"Error in RAG pipeline: {str(e)}")


@app.delete("/user/{user_id}/data")
async def delete_user_data(user_id: str, auth: str = Depends(security)):
    """–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (GDPR compliance)"""
    try:
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
        vector_store.delete_user_data(user_id)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ FileProcessor)
        file_processor.delete_user_files(user_id)
        
        return {
            "status": "success",
            "message": f"All data for user {user_id} has been permanently deleted",
            "deleted_at": "2024-01-01T00:00:00Z"  # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        }
    except Exception as e:
        raise HTTPException(500, f"Error deleting user data: {str(e)}")

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    security_status = "encryption_active" if encryptor.is_ready() else "encryption_inactive"
    
    return HealthResponse(
        status="healthy",
        model=settings.YANDEX_GPT_MODEL,
        security_level=security_status,
        vector_db_connected=vector_store.is_connected(),
        privacy_features=["data_encryption", "user_isolation", "secure_deletion"]
    )

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
async def process_file_background(file_id: str, user_id: str, encrypted_content: bytes, filename: str):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: –¥–µ–∫—Ä–∏–ø—Ç -> —á–∞–Ω–∫–∏–Ω–≥ -> –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
    try:
        # –î–µ–∫—Ä–∏–ø—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        decrypted_text = encryptor.decrypt_text(encrypted_content)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        chunks = file_processor.process_text(decrypted_text, user_id)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
        vector_store.add_chunks(chunks, user_id)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print(f"File {filename} processed successfully for user {user_id}")
        
    except Exception as e:
        print(f"Error processing file {filename}: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8080)
