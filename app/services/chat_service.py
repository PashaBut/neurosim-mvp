"""
üéØ RAG-—Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

ARCHITECTURE:
1. RETRIEVAL: –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
2. AUGMENTATION: –û–±–æ–≥–∞—â–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
3. GENERATION: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ "–æ—Ç –ª–∏—Ü–∞" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

FUTURE: Fine-tuning –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (Llama/Mistral) –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–∞–Ω–Ω—ã—Ö
"""

from typing import List, Optional
import logging
from app.config import settings

# TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã
# from app.clients.yandex_gpt import YandexGPTClient
# from app.services.vector_store import VectorStore

logger = logging.getLogger(__name__)

class ChatService:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —á–∞—Ç–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        
        FUTURE: Dependency Injection –¥–ª—è –ª—É—á—à–µ–π —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏
        """
        # TODO: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
        # self.vector_store = VectorStore()
        # self.llm_client = YandexGPTClient()
        
        logger.info("ChatService initialized with RAG architecture")

    def generate_personalized_response(self, user_question: str, user_id: str) -> str:
        """
        üß† –û—Å–Ω–æ–≤–Ω–æ–π RAG-–ø–∞–π–ø–ª–∞–π–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        
        Args:
            user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –û—Ç–≤–µ—Ç, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π "–æ—Ç –ª–∏—Ü–∞" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        RAG Flow:
            Question ‚Üí Vector Search ‚Üí Context Augmentation ‚Üí LLM Generation ‚Üí Personalized Response
        """
        try:
            logger.info(f"Starting RAG pipeline for user {user_id}, question: '{user_question}'")
            
            # 1. RETRIEVAL: –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            relevant_chunks = self._retrieve_relevant_chunks(user_question, user_id)
            
            if not relevant_chunks:
                return self._get_fallback_response(user_question)
            
            # 2. AUGMENTATION: –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context = self._build_context(relevant_chunks)
            
            # 3. GENERATION: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ "–æ—Ç –ª–∏—Ü–∞" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = self._generate_response(user_question, context, user_id)
            
            logger.info(f"RAG pipeline completed for user {user_id}")
            return response
            
        except Exception as e:
            logger.error(f"Error in RAG pipeline for user {user_id}: {str(e)}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _retrieve_relevant_chunks(self, question: str, user_id: str) -> List[str]:
        """
        üîç RETRIEVAL: –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
        
        FUTURE: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º
        """
        # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
        # return self.vector_store.similarity_search(
        #     query=question,
        #     user_id=user_id,
        #     limit=3
        # )
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        logger.info(f"Vector search simulated for user {user_id}")
        return [
            "–Ø —á–∞—Å—Ç–æ –¥—É–º–∞—é –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞.",
            "–í –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ —è –Ω–∞—á–∞–ª –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏.",
            "–ú–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏: —á–µ—Å—Ç–Ω–æ—Å—Ç—å, —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –ø–æ–º–æ—â—å –¥—Ä—É–≥–∏–º –ª—é–¥—è–º."
        ]

    def _build_context(self, chunks: List[str]) -> str:
        """
        üé≠ AUGMENTATION: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        
        Args:
            chunks: –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
            
        Returns:
            –ï–¥–∏–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        """
        context = "\n\n".join([f"- {chunk}" for chunk in chunks])
        logger.debug(f"Built context with {len(chunks)} chunks")
        return context

    def _generate_response(self, question: str, context: str, user_id: str) -> str:
        """
        ü§ñ GENERATION: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ LLM —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
        
        FUTURE: 
        - –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Yandex GPT API
        - Fine-tuning –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
        - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
        """
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ "–æ—Ç –ª–∏—Ü–∞" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        prompt = self._build_personalized_prompt(question, context)
        
        # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ LLM
        # response = self.llm_client.generate(prompt)
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –ø–∞–π–ø–ª–∞–π–Ω–∞
        response = f"""
[RAG DEMO] –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π —è –±—ã –æ—Ç–≤–µ—Ç–∏–ª —Ç–∞–∫:

–ù–∞ –≤–æ–ø—Ä–æ—Å "{question}" 

–ò–∑ –º–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π —è –ø–æ–º–Ω—é, —á—Ç–æ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞ –¥–ª—è –º–µ–Ω—è. 
–Ø –≤–µ–¥—É –¥–Ω–µ–≤–Ω–∏–∫ –∏ —Ü–µ–Ω—é —á–µ—Å—Ç–Ω–æ—Å—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å —Å–æ–±–æ–π –∏ –¥—Ä—É–≥–∏–º–∏.

–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≥–æ, –∫–∞–∫ RAG-–ø–∞–π–ø–ª–∞–π–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.
        """.strip()
        
        logger.info(f"Generated personalized response for user {user_id}")
        return response

    def _build_personalized_prompt(self, question: str, context: str) -> str:
        """
        üìù –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ "–æ—Ç –ª–∏—Ü–∞" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        SECURITY: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        """
        prompt = f"""
–¢—ã - —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ö–ê–ö –°–ê–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨,
–∏—Å–ø–æ–ª—å–∑—É—è –µ–≥–æ —Å—Ç–∏–ª—å, —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–ø—ã—Ç –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ó–ê–ü–ò–°–ï–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{context}

–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {question}

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –û—Ç–≤–µ—Ç—å –û–¢ –ü–ï–†–í–û–ì–û –õ–ò–¶–ê (–∏—Å–ø–æ–ª—å–∑—É—è "—è", "–º–Ω–µ", "–º–æ–π")
2. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç–∏–ª—å –∏ —Ç–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
3. –ë—É–¥—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–º –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω—ã–º
4. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ
5. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ

–û–¢–í–ï–¢ (–æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –≤ —Å—Ç–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):
"""
        return prompt.strip()

    def _get_fallback_response(self, question: str) -> str:
        """
        üõ°Ô∏è Fallback –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ –Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        FUTURE: –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
        """
        return f"""
–ü–æ–∫–∞ —É –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –º–æ–∏—Ö –∑–∞–ø–∏—Å—è—Ö, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å "{question}" –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ–ª—å—à–µ –≤–∞—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ (–¥–Ω–µ–≤–Ω–∏–∫–∏, –∑–∞–º–µ—Ç–∫–∏, —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è), —á—Ç–æ–±—ã —è –º–æ–≥ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à —Å—Ç–∏–ª—å –∏ –æ–ø—ã—Ç.
""".strip()

# –°–∏–Ω–≥–ª—Ç–æ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
chat_service = ChatService()
