"""
üìÑ –°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ —Ç–µ–∫—Å—Ç–∞

ARCHITECTURE:
- –†–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —á–∞–Ω–∫–∏
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤
"""

import logging
from typing import List, Dict, Any
from app.config import settings

logger = logging.getLogger(__name__)

class FileProcessor:
    def __init__(self):
        logger.info("FileProcessor initialized")
    
    def process_text(self, text: str, user_id: str) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞–Ω–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —á–∞–Ω–∫–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–º–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
            chunks = self._split_into_chunks(text)
            
            logger.info(f"Processed text into {len(chunks)} chunks for user {user_id}")
            return chunks
            
        except Exception as e:
            logger.error(f"Error processing text for user {user_id}: {str(e)}")
            return []
    
    def _split_into_chunks(self, text: str, chunk_size: int = 1000) -> List[Dict[str, Any]]:
        """
        –†–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞–Ω–∫–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        
        FUTURE: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ —Å–º—ã—Å–ª—É
        """
        chunks = []
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º/–∞–±–∑–∞—Ü–∞–º
        paragraphs = [p.strip() for p in text.split('\n') if p.strip()]
        
        current_chunk = ""
        for paragraph in paragraphs:
            if len(current_chunk) + len(paragraph) <= chunk_size:
                current_chunk += paragraph + " "
            else:
                if current_chunk:
                    chunks.append({
                        "text": current_chunk.strip(),
                        "metadata": {
                            "chunk_size": len(current_chunk),
                            "type": "text"
                        }
                    })
                current_chunk = paragraph + " "
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
        if current_chunk:
            chunks.append({
                "text": current_chunk.strip(),
                "metadata": {
                    "chunk_size": len(current_chunk),
                    "type": "text"
                }
            })
        
        return chunks
    
    def process_file(self, file_content: bytes, filename: str, user_id: str) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        
        FUTURE: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PDF, DOCX –∏ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        """
        try:
            # –ü–æ–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            if filename.endswith('.txt'):
                text = file_content.decode('utf-8')
                return self.process_text(text, user_id)
            else:
                logger.warning(f"Unsupported file format: {filename}")
                return []
                
        except Exception as e:
            logger.error(f"Error processing file {filename} for user {user_id}: {str(e)}")
            return []

# –°–∏–Ω–≥–ª—Ç–æ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä
file_processor = FileProcessor()
